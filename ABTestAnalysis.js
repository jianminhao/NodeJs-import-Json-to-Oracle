/* This file intends to figure out the A/B test distribution balance issue. 
It tests the distribution of seed number and hash number and compare the result. 
It requires two data files one inlcude the seednumber, and the other one include the application id. 
Author: J W
*/

var fs = require("fs");
var crypto = require('crypto');

// Prepare data, seed number, 1000 random number generated by UUID function in Java
var seedNumberFile = '/Users/julia.wang/nodejs/data.js';
//var seedNumberFile = '/Users/julia.wang/nodejs/data_28.js';


var fileContent;
try {
  fileContent = fs.readFileSync(seedNumberFile, "utf8");
} catch (e) {
  console.log("Process file not exist: " + seedNumberFile);
}
var seedNumberList = fileContent.split("\n");

// Prepare data, application ID, 1000 sequential number starting from 3000001
var appIdFile = '/Users/julia.wang/nodejs/applicationId.js';

try {
  fileContent = fs.readFileSync(appIdFile, "utf8");
} catch (e) {
  console.log("seedNumberFile file not exist: " + seedNumberFile);
}
var appIdList = fileContent.split("\n");


// Main function 

var countA = 0; 
var countB = 0;

var testNameList = [
  '1 - Online Notification',
  '2 - Auto Verification of References',
  '3 - Auto-CIP no ID',
];

var testMethodList = 
[
  '1A - Last Digit Even/Odd',
  '1B - Last Digit Small/Big',
  '1C - Last Digit pick',

  '2A - Last 2nd Digit Even/Odd',
  '2B - Last 2nd Digit Small/Big',
  '2C - Last 2nd Digit pick',

  '3A - Sum Digit Even/Odd',
  '3B - Sum Digit Small/Big',
  '3C - Sum Digit Digit pick',
 
  '4A - Hash App Id, test Name Even/Odd',
  '4B - Hash App Id, test Name Small/Big',
  '4C - Hash App Id, test Name pick',

  '5A - Hash App Id, test Name, seed number Even/Odd',
  '5B - Hash App Id, test Name, seed number Small/Big',
  '5C - Hash App Id, test Name, seed number pick',

  '6A - Hash App Id, test Name, using mod 8 Even/Odd',
  '6B - Hash App Id, test Name using mod 8 Small/Big',
  '6C - Hash App Id, test Name using mod 8 pick',

  '7A - Hash App Id, test Name, seedNumber, mod 8 Even/Odd',
  '7B - Hash App Id, test Name, seedNumber, mod 8 Small/Big',
  '7C - Hash App Id, test Name, seedNumber, mod 8 pick',

  '8A - seedNumber last 3 digit mod 8 Even/Odd',
  '8B - seedNumber last 3 digit mod 8 Small/Big',
  '8C - seedNumber last 3 digit mod 8 pick',
];


var contrlledList1 = ['0', '2', '4', '6', '8'];
var contrlledList2 = ['0', '1', '2', '3', '4'];
var contrlledList3 = ['0', '1', '5', '8', '9'];

// Controlled List for 8 digits
var contrlledList1x = ['0', '2', '4', '6'];
var contrlledList2x = ['0', '1', '2', '3'];
var contrlledList3x = ['0', '1', '4', '5'];

testMethodList.forEach(testMethod => {
  testNameList.forEach(testName => {
    countA = 0;
    countB = 0;
    for (var i = 0; i < seedNumberList.length; i++){
      if ('A' === getBucket(appIdList[i], seedNumberList[i], testName, testMethod) ){
        countA ++;
      }
      else{
        countB ++;
      }
    }
    console.log(testMethod + '--' + testName);
    console.log('A Group: ' + countA + ' : ' + (countA/(countA+countB) *100).toPrecision(4) + '%');
    console.log('B Group: ' + countB + ' : ' + (countB/(countA+countB) *100).toPrecision(4) + '%');
    var diff = (countA/(countA+countB) *100).toPrecision(4) - 50;
    if (countA < countB){
      diff = 0 - diff;
    }
    console.log(diff + '%');
  });
});


function getBucket(appid, seedNumber, testname, testMethod)
{
  switch (testMethod) {
		case '1A - Last Digit Even/Odd':
      var lastD = lastDigit(seedNumber);
      if (contrlledList1.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
			break;
		case '1B - Last Digit Small/Big':
      var lastD = lastDigit(seedNumber);
      if (contrlledList2.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;	
		case'1C - Last Digit pick':
      var lastD = lastDigit(seedNumber);
      if (contrlledList3.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case '2A - Last 2nd Digit Even/Odd':
      var lastD = lastDigit2(seedNumber);
      if (contrlledList1.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case '2B - Last 2nd Digit Small/Big':
      var lastD = lastDigit2(seedNumber);
      if (contrlledList2.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case '2C - Last 2nd Digit pick':
      var lastD = lastDigit2(seedNumber);
      if (contrlledList3.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case '3A - Sum Digit Even/Odd':
      var lastD = sumDigit(seedNumber);
      if (contrlledList1.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '3B - Sum Digit Small/Big':
      var lastD = sumDigit(seedNumber);
      if (contrlledList2.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '3C - Sum Digit Digit pick':
      var lastD = sumDigit(seedNumber);
      if (contrlledList3.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '4A - Hash App Id, test Name Even/Odd':
      var lastD = calcHash(appid + testname);
      if (contrlledList1.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '4B - Hash App Id, test Name Small/Big':
      var lastD = calcHash(appid + testname);
      if (contrlledList2.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '4C - Hash App Id, test Name pick':
      var lastD = calcHash(appid + testname);
      if (contrlledList3.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '5A - Hash App Id, test Name, seed number Even/Odd':
      var lastD = calcHash(appid + testname + seedNumber);
      if (contrlledList1.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '5B - Hash App Id, test Name, seed number Small/Big':
      var lastD = calcHash(appid + testname + seedNumber);
      if (contrlledList2.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '5C - Hash App Id, test Name, seed number pick':
      var lastD = calcHash(appid + testname + seedNumber);
      if (contrlledList3.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '6A - Hash App Id, test Name, using mod 8 Even/Odd':
      var lastD = calcHash2(appid + testname );
      if (contrlledList1x.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '6B - Hash App Id, test Name using mod 8 Small/Big':
      var lastD = calcHash2(appid + testname);
      if (contrlledList2x.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case   '6C - Hash App Id, test Name using mod 8 pick':
      var lastD = calcHash2(appid + testname);
      if (contrlledList3x.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case '7A - Hash App Id, test Name, seedNumber, mod 8 Even/Odd':
      var lastD = calcHash2(appid + testname + seedNumber);
      if (contrlledList1x.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '7B - Hash App Id, test Name, seedNumber, mod 8 Small/Big':
      var lastD = calcHash2(appid + testname + seedNumber);
      if (contrlledList2x.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '7C - Hash App Id, test Name, seedNumber, mod 8 pick':
      var lastD = calcHash2(appid + testname + seedNumber);
      if (contrlledList3x.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
 case '7A - Hash App Id, test Name, seedNumber, mod 8 Even/Odd':
      var lastD = calcHash2(appid + testname + seedNumber);
      if (contrlledList1x.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '7B - Hash App Id, test Name, seedNumber, mod 8 Small/Big':
      var lastD = calcHash2(appid + testname + seedNumber);
      if (contrlledList2x.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '7C - Hash App Id, test Name, seedNumber, mod 8 pick':
      var lastD = calcHash2(appid + testname + seedNumber);
      if (contrlledList3x.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break; 
    case '8A - seedNumber last 3 digit mod 8 Even/Odd':
      var lastD = last3digitMod8(seedNumber);
      if (contrlledList1x.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '8B - seedNumber last 3 digit mod 8 Small/Big':
      var lastD = last3digitMod8(seedNumber);
      if (contrlledList2x.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
    case  '8C - seedNumber last 3 digit mod 8 pick':
      var lastD = last3digitMod8(seedNumber);
      if (contrlledList3x.includes(lastD)){
        return 'A';
      }
      else{
        return 'B';
      }
      break;
	}
}



function lastDigit(seed)
{
  return seed[21];
}


function lastDigit2(seed)
{
  return seed[20];
}
function sumDigit(seed)
{
  var sum = 0;
  for (var i = 0; i < seed.length; i ++)
  {   
    sum += Number(seed[i]);
  }
//  console.log(sum);
  var digit = sum%10
  return digit + '';
   
}


function calcHash(seed, appid, testname)
{
  var hash = crypto.createHash('md5').update(seed+appid+testname).digest('hex');
 // console.log(hash);
  var n = parseInt(hash[31], 16);
 // console.log('Parse Int: ' + n);
  return n%10 + '';    
}


function calcHash2(seed, appid, testname)
{
  var hash = crypto.createHash('md5').update(seed+appid+testname).digest('hex');
//   console.log(hash);
  var n = parseInt(hash[31], 16);
 // console.log('Parse Int 16 : ' + n + ' :% ' + n%8);
  return n%8 + '';    
}

function last3digitMod8(seed)
{
  var n = parseInt(seed[19]+ seed[20]+seed[21]);
 // console.log('Parse Int last 3 : ' + n + ' :% ' + n%8);
  return n%8 + '';    
}
/*



 function groupByMethodX(list, contrlledList)
 {
   var countA = 0; 
   var countB = 0;
   
   Object.keys(list).forEach(function(key) {
     if (contrlledList.includes(key))
     {
       countA += list[key];
     }
     else
     {
       countB += list[key];
     }
   });
   console.log('------Method 1-----');
   console.log('A Group: ' + countA + ' : ' + (countA/(countA+countB)*100).toPrecision(4) + '%');
   console.log('B Group: ' + countB + ' : ' + (countB/(countA+countB)*100).toPrecision(4) + '%');
 }

 function groupByMethod123X(list, contrlledList1, contrlledList2, contrlledList3)
 {
   var countA = 0; 
   var countB = 0;

   var result = {};
   var listLen = 0;
   Object.keys(list).forEach(function(key) {
    
    var groupName = '';
     if (contrlledList1.includes(key))
     {
      groupName += 'A'; 
     }
     else
     {
      groupName += 'B';
     }
     if (contrlledList2.includes(key))
     {
      groupName += 'A'; 
     }
     else
     {
      groupName += 'B';
     }
     if (contrlledList3.includes(key))
     {
      groupName += 'A'; 
     }
     else
     {
      groupName += 'B';
     }
     result[groupName] = result[groupName] ? result[groupName] + list[key] : list[key];
     listLen += list[key];
     console.log(key + ' : ' + list[key] + groupName + ':' + result[groupName]);
   });
   console.log('------Combine Method 1,2,3-----');
   Object.keys(result).forEach(function(key) {
   console.log(key + ' : ' + result[key] + ' : ' + ((result[key]/listLen)* 100).toPrecision(4)  + '%');
  });
 }



 var list5 = aggregateByHash8x(seedNumberList, appIdList, testNameList);

 var contrlledList1x = ['0', '2', '4', '6'];
 var contrlledList2x = ['0', '1', '2', '3'];
 var contrlledList3x = ['0', '1', '4', '5'];

 groupByMethod123X(list5, contrlledList1x, contrlledList2x, contrlledList3x);

 var list7 = aggregateByHash8xa(seedNumberList, appIdList, testNameList);


 function aggregateByHash8xa(arrSeed1, appIdList, testNameList)
 {
  var list ={};
   for (var i = 0; i < arrSeed1.length; i ++)
   {
     var appid = appIdList[i];
     var seed = arrSeed1[i];
     testName = testNameList[i%3];
     var lastD = calcHash2(appid + testName);
    // console.log('lastD ' + arrSeed1[i] + ': ' + lastD);
     list[lastD] = list[lastD] ? list[lastD] + 1 : 1;
   
   }
   for (var i = 0; i < 10; i ++)
   {
    list[i+''] = list[i+'']?list[i+'']:0;
    // console.log(i + ': ' + list[i+''] + ' : ' + (list[i+'']/arrSeed1.length).toPrecision(5) * 100 + '%'); 
   }
 //  console.log(list);
   return list;
 }
 */